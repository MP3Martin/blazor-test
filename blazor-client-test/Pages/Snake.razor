@page "/snake/{sizeParam:int?}"
@using static Snake.SnakeGame;

<PageTitle>@title</PageTitle>

<div>
	<h1 style="display: inline;">@title</h1>
	<p style="display: inline-block; margin-left:0.7rem; font-size: 0.8rem; vertical-align: middle;">Without snake-to-snake collisions because there is no ending screen. Go to @("\".../snake/x\"") where x is a number to set the snake game size.</p>
</div>


<pre><code>@(textOut)</code></pre>

<div class="snake-grid-container">
	@for (int j = 0; j < snakeGame.snakeArray.GetLength(1); j++) {
		@for (int i = 0; i < snakeGame.snakeArray.GetLength(0); i++) {
			SnakeData valueData = snakeGame.snakeArray[i, j];
			var colors = new Dictionary<SnakeData, string> {
				{ SnakeData.Air, "#393939" },
				{ SnakeData.Snake, "#919191" },
				{ SnakeData.SnakeHead, "white" },
				{ SnakeData.Food, "#00d500" }
			};
			string color = colors[valueData];
			<div style="background-color: @(color) !important;" id="snake-item-@(i)-@(j)" />
		}
	}
</div>

<input @onkeydown="UpdateLastKey" id="snake_control_input" />
<div style="margin-bottom: 1rem;" />

<style>
	:root {
		--snake-array-size: @(snakeArraySize);
	}
</style>

@code {
	private string title = "Snake";
	[Parameter]
	public int? sizeParam { get; set; }
	protected override void OnInitialized() {
		if (sizeParam != null)
			sizeParam = Math.Max(3, (int)sizeParam);
		var data = new { size = sizeParam };
		OnPageLoad(data);
	}
}